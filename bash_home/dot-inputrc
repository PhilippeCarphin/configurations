$include /etc/inputrc
# These 3 are from Philippe Blain
# color common prefix during completion
set colored-completion-prefix on
# add type suffix to items during autocompletion
set visible-stats on

$if Bash
    # Causes references to previous commands to be expanded when pressing space
    # after something like `!!`  to be expanded as soon as a space is inserted.
    # Useful to confirm that it's the right thing for things like `!3:1` to get
    # the first argument of the 3rd previous command in the history
    #
    # It needs to be in a conditionnal so that it only happens with Bash
    # otherwise it will disable your ability to enter spaces in other things
    # that use readline like the Python interactive shell.
    Space: magic-space

    # color folder/files during completion
    # Only for Bash because otherwise we would get potentially weird coloring
    # since in Python, pressing <TAB><TAB> will yield completion candidates
    # that are assuredly not paths to files that exist.  They will get the
    # coloring of missing files which is usually flashing white on red background.
    #
    # In bash, we ensure that when readline is initialized, there is no coloring
    # specification for missing files.
    set colored-stats on
$endif

$if Python
    # Surround the current input with help(_) and hit enter
    # - C-a to go to beginning of line
    # - Type "help("
    # - C-e to go to end of line
    # - Type ")" and Enter
    "\C-h": "\C-ahelp(\C-e)\n"
$endif


$if mode=emacs
    # Change C-f and C-b to move by shell words
    # Originally, C-f is forward-char and M-f is forward-word but I use
    # the Fn-' to produce right-arrow.
    "\C-f": shell-forward-word # Originally forward-char
    "\C-b": shell-backward-word # Originally backward-char

    "\el": forward-word
    "\eh": backward-word

    # "\C-t": dynamic-complete-history
    # "\C-s": '\C-a \C-f \C-w' # Can't use C-s because it "freezes the probram"
    # "\C-'": '\C-a\C-f\C-w'   # Also unusable for some reason

    # Delete command (first word on command line)
    "\C-y": '\C-a\C-f\C-w'

    "\C-x \C-r": re-read-init-file
    # "\C-n": non-incremental-forward-history-search
    # Takes what you already have, puts it in "$(...)" and ends with your cursor
    # at the start of the line.  Fun thing to try but you could just type '| xargs'
    # instead.  But it's a cool demo of how you can customize readline
    # - go to start (\C-a)
    # - Insert ' "$('
    # - go to end (\C-e)
    # - insert '"'
    # - go to start
    "\e\C-m": '\C-a "$(\C-e)"\C-a'
    # shell-expand-line is bound by default to '\e\C-e' but I like this better
    "\C- ": shell-expand-line
    "\C-g": '\C-c'
$endif

# NOTE
# - \e\C-e: Expand subshell on command line
