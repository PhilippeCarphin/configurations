# Sane scrolling (I don't know where I got this or what it does)
set -g terminal-overrides 'xterm*:smcup@:rmcup@'

# Set prefix to be 'C-a'.  By itself this prevents you from using 'C-a' to go
# to the start of the line in BASH.  The second line makes 'prefix C-a' send
# the key 'C-a' to the underlying process.  Therefore, pressing 'C-a C-a'
# brings us to the start of the line.
set -g prefix C-a
bind C-a send-keys C-a
# Keys to switch the prefix for when I use a Tmux pane to ssh to another machine
# and attach to a session on that machine.  I can make this session's prefix
# be C-b so 23 that I can use C-a as the prefix on the inner tmux session.
#bind a display-message "prefix a: changing prefix to C-q" \; set prefix C-q
bind e display-message "prefix e: changing prefix to C-q" \; set prefix C-q \;
bind E display-message "prefix E: changing prefix to C-a" \; set prefix C-a \;

# Special keys are handled by terminals by sending ESC followed by some other
# stuff.  When TMUX receives an ESC, it waits 'escape-time' milliseconds for
# the rest of the sequence so that it can send the actual key.
# The default is 500 but that means that after pressing ESC in vim, it takes
# half a second before vim gets the ESC to get out of insert mode.  Way too long!
# However, if I set it to 1(ms), then when I start TMUX and when I reattach, I
# get these keys sent to my active pane: `61;6;7;22;23;24;28;32;42c`.  So the
# idea is to set it as low as possible so that presing ESC in vim isn't
# annoying high enough that TMUX has time to receive the part after ESC in
# escape sequences.
set -s escape-time 100

bind r display 'Sourcing config file ~/.tmux.conf' \; source-file ~/.tmux.conf

set -g status-right '#(whoami)@#(hostname)  #(TZ="America/Toronto" date "+%%Y-%%m-%%d %%H:%%M")'

set -g default-terminal "xterm-256color"

################################################################################
# Pane and window numbering, creation, selection, and manipulation
################################################################################
# Window numbering options
set -g base-index 1
set -g renumber-window on

bind k select-pane -U # switch to panel Up
bind j select-pane -D # switch to panel Down
bind h select-pane -L # switch to panel Left
bind l select-pane -R # switch to panel Right

# resize panes like vim but easier
bind -r C-h resize-pane -L 4
bind -r C-l resize-pane -R 4
bind -r C-j resize-pane -D 4
bind -r C-k resize-pane -U 4


# Split windows, the regular key to split horizontally is '%' which is annoying
# because the pinky needs to switch from CTRL to SHIFT.  This is better and more
# intuitive
bind / split-window -h -c "#{pane_current_path}"
bind é split-window -h -c "#{pane_current_path}" # / does 'é' when I'm in CanadianMultilingualStandard keyboard
bind - split-window    -c "#{pane_current_path}"

# Split windows on other side.  Same keys but with shift pressed.
bind ? split-window -h -b -c "#{pane_current_path}"
bind É split-window -h -b -c "#{pane_current_path}"
bind _ split-window -v -b -c "#{pane_current_path}"

# New window always in HOME
bind c new-window -c "$HOME"

bind b break-pane \; display "break-pane"

################################################################################
# Copy-mode
################################################################################
# TMUX Looks at the EDITOR environment variable so you wouldn't need to do this
# if your EDITOR=vim or vi but it's good to have it here.  Because most tools use
# vi as the default value when EDITOR is not defined, a vim-person is likely
# to not define it.
set -g mode-keys vi

# Since the '[' key on the Canadian Multiligual Standard keyboard layout is
# a dead '^', doing 'bind ^ copy-mode' doesn't work well because when the key
# is pressed, nothing happens until any subsequent key is pressed so instead
# I want to stop using that key and get used to using Enter instead
bind [ display-message "Use Enter instead"
bind Enter copy-mode
bind ç paste-buffer

bind -T root MouseDown2Pane paste-buffer

bind -T copy-mode-vi Escape send -X cancel
bind -T copy-mode-vi C-g send -X cancel
bind -T copy-mode-vi C-c send -X cancel
bind -T copy-mode-vi y send -X copy-selection-and-cancel
bind -T copy-mode-vi é command-prompt -p "(search down)" "send -X search-forward \"%%%\""
bind -T copy-mode-vi É command-prompt -p "(search up)" "send -X search-backward \"%%%\""

bind C-r command-prompt -p "rename-window" "rename-window \"%%%\""
# Sometimes when scrolling, I'm doing C-uuuuu to go up, then when I'm close
# to my target I can overshoot it and do jjj to get to it.  Depending on the
# timing, the Ctrl key can still be pressed during the first j causing me to
# do C-j and dropping out of copy-mode
#
# Because 'C-l' is bound globally (bind -n), if there is no copy-mode binding
# the C-l binding below is run which takes us out of copy-mode.  So unbinding
# doesn't work.  However, binding it to something in copy-mode works.  Since
# 'l' is bound to cursor-right, binding C-l to cursor-right works
bind -T copy-mode-vi C-j send -X cursor-down
bind -T copy-mode-vi C-l send -X cursor-right
bind -T copy-mode-vi C-a send -X start-of-line
bind -T copy-mode-vi C-e send -X end-of-line
bind -T copy-mode-vi C-n send -X cursor-down
bind -T copy-mode-vi C-p send -X cursor-up
bind -T copy-mode-vi C-v send -X rectangle-toggle \; send -X begin-selection
bind -T copy-mode-vi v send -X begin-selection
# When running a command that produces a ton of output, we sometimes want to
# go up to the beginning of the output.  To do this, I search up for something
# that can only be in my prompt.  The '' are quite unlikely to be found
# somewhere else.
bind -T copy-mode-vi u send -X search-backward "${USER}"
bind -T copy-mode-vi d send -X search-forward "${USER}"

# From man tmux about command pipe-pane
bind C-p pipe-pane 'cat >>~/output.#I-#P'

# Scrollback:  Increase the size to a ridiculous amount
# Suppose very long lines of 400chars, 400*100000 = 80_000_000 = 40M/pane
# Say 5 windows with 4 panes, that's 20 panes.  That gives 800M and we're being
# very pecimistic with the 400 chars per line and assuming that all the panes
# have a completely full history.
set -g history-limit 100000

# Run command in pane
bind t command-prompt -p "hsplit command >" "split-window \"bash -il /home/phc001/bin/tmp-tmux-pane '%%%'\""
bind T command-prompt -p "vsplit command >" "split-window \"bash -il /home/phc001/bin/tmp-tmux-pane '%%%'\""

# Clear history
bind -n C-l send-keys C-l \; run 'sleep 0.1' \; clear-history

# Scroll wheel sends up/down keys if the program is in an alternate buffer
# Inspired by github.com/nhdaly/tmux-better-mouse-mode
# if (alternate-buffer) {
#     send-key <up/down>
# } else {
#     copy-mode -e
#     send-keys -M
# }
# Note: send-keys -M forwards mouse events which is why both up and down
# bindings do `send-keys -M`.  For the up binding, we also have to get in
# copy-mode to replicate regular behavior.
#
# More sophisticated solutions also use an IF to check if we are in mouse
# mode but since this doesn't need to be general, I'm not doing that because
# the of the quoting nightmare that would entail.
bind-key -T root WheelDownPane "if-shell -Ft= \"#{alternate_on}\" \"send-keys -t= down; send-keys -t= down ; send-keys -t= down\"   \"send-keys -t= -M\""
bind-key -T root WheelUpPane   "if-shell -Ft= \"#{alternate_on}\" \"send-keys -t= up; send-keys -t= up ; send-keys -t= up\"         \"copy-mode -e ; send-keys -t= -M\""

# Allow programs interaction with system clipboard using OSC 52 by programs
# running inside TMUX.
# - https://github.com/tmux/tmux/wiki/Clipboard
# The 'Security Concerns' says that it's a security concern but since without
# tmux, programs can already set the system clipboard using OSC 52, I don't see
# problems.  Although I guess it is a security feature that TMUX can prevent
# progams from doing so.  And maybe there is a concern when sharing a tmux session.
# Addtional refs:
# - https://www.reddit.com/r/vim/comments/k1ydpn/a_guide_on_how_to_copy_text_from_anywhere/
# - xTerm reference: https://invisible-island.net/xterm/ctlseqs/ctlseqs.html#h3-Operating-System-Commands
# To set the clipboard: `printf "\033]52;c;%s\007"` where the string is a base64
# encoded version of the string you want to send to the clipboard.
set -g set-clipboard on

# For Emacs package clipetty
set -ag update-environment "SSH_TTY"

# Source system specific files based on if I'm at work or if I'm on one of my
# personal computers.  On my personal computers, I'm pcarphin and at work I'm
# something else.  Anytime I'm not pcarphin, I want tmux.conf.work to be sourced
# NOTE: Depending on the version of TMUX, `[[ ${USER} == ... ]]`, `[ ${USER} = ]`
# and `[[ #{USER} == ... ]]` may not work, however `[ #{USER} = ... ]` gives the
# correct result on every version of TMUX that I have tried.  But doing those
# 'ifs' in TMUX is a complete pain so instead, I just make ~/.tmux.conf.specific
# point to the work file at work and point to the home file at home.  So easy
# and reliable
source-file ~/.tmux.conf.specific
source-file ~/.tmux.conf.colors

set -g mouse on
bind m set -g mouse
