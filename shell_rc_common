#!/bin/bash

source ~/.git-prompt.sh

alias n='nnn -dhQex'
alias ls='ls --color=auto -h'
alias grep='grep -n --color'
alias tree='tree -C'
alias rg='rg --no-heading --color=auto'
alias diff='diff -u --color'
alias :wqa='exit 0'
alias :q='exit 0'
alias :qa='exit 0'
alias :wq='exit 0'
alias :cq='exit 1'
GIT_CD_VERBOSE=yessir
alias git='$HOME/.philconfig/git_home/git-enforce-rules-of-philippes'
alias diff='diff -u --color'
alias update_repos='repos find ~/Repositories --recursive --merge --cleanup'
# Stolen from gil000: Processes Per User
alias ppu='ps hax -o user | sort -n | uniq -c | sort -n'
# Stolen from gil000: Running Processes Per User
alias rppu='ps haxr -o user | sort -n | uniq -c | sort -n'
# Use function because of expand_aliases option
function ln(){ command ln -nv "$@" ; }

################################################################################
# Base functions used in other places
################################################################################
add_to_prompt_command(){
    local bash_major_version=${BASH_VERSINFO[0]}
    if (( bash_major_version > 4 )) ; then # WIP Change back to 4
        #
        # Turn PROMPT_COMMAND into an array
        #
        if ! [[ ${PROMPT_COMMAND@a} == *a* ]] ; then # is an array
            #
            # PROMPT_COMMAND may have be 'history -a ; echo 'string containing a ;.' ; echo ";"'
            # which seems to be basically impossible to correctly split into
            # 3 commands.  So if PROMPT_COMMAND was not an array, we don't split
            # its original value into multiple elements of the new array, we
            # just put the original value as the first element of the new array.
            #
            # I have however taken it as a challenge and my tests repo does
            # have a custom builtin that can do it reliably by calling some of
            # the internal C functions of the BASH parser.
            #
            PROMPT_COMMAND=("${PROMPT_COMMAND}")
        fi
        PROMPT_COMMAND+=("$1")
    else
        if [[ -z ${PROMPT_COMMAND} ]] ; then
            PROMPT_COMMAND="$1"
        else
            PROMPT_COMMAND="${PROMPT_COMMAND} ; ${1}"
        fi
    fi
}

source-dir(){
    local dir=$1
    local files=($(find -L ${dir} -maxdepth 1 -type f -name '*.bash' -o -name '*.sh'))
    local f
    for f in "${files[@]}" ; do
        source ${f}
    done
}


p.error(){
    printf "${FUNCNAME[1]}: \033[1;31mERROR\033[0m: $*\n" >&2
}

_setup_ps0(){
    _ps0_phrases=()
    _ps0_color_cube_path=(21 57 93 129 165 201 200 199 198 197 196 202 208 214 220 226 190 154 118 82 46 40 39 33 27)
    _ps0_color_cube_index=0
    # Ps0
    if [[ -f ~/ps0 ]] ; then
        <~/ps0 readarray _ps0_phrases
    fi

    _set_ps0(){
        _ps0_color_cube_index=$(( (${_ps0_color_cube_index} + 1) % ${#_ps0_color_cube_path[@]} ))
        local c=${_ps0_color_cube_path[_ps0_color_cube_index]}
        printf -v PS0 "\001\033[1;38;5;${c}m\002%s\001\033[0m\002" "${_ps0_phrases[$(( $RANDOM % ${#_ps0_phrases[@]} ))]}"
    }
    if ((${BASH_VERSINFO[0]} >= 5)) && [[ "${PROMPT_COMMAND@a}" == *a* ]] ; then
        PROMPT_COMMAND+=(_set_ps0)
    else
        PROMPT_COMMAND=${PROMPT_COMMAND:+${PROMPT_COMMAND};}_set_ps0
    fi
}

_unset_ps0(){
    unset PS0
    _set_ps0(){
        :
    }
}
