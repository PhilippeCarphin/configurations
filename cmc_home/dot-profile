#!/bin/bash
if [[ $TERM == "dumb" ]] ; then
	unset PROMPT_COMMAND
	PS1='$ '
	return
fi

main(){
    export STOW_DIR=$HOME/fs1
    export PACKAGE_DIR=$STOW_DIR/Cellar
    export GITLAB_RUNNER_SCIENCE_ORDSOUMET_KEEP_FILES='yas'
    export GONOSUMDB=gitlab.science.gc.ca
    export PATH=$STOW_DIR/bin:/home/phc001/site4/go_1.16.4_linux_amd64/bin:$HOME/bin:$HOME/go/bin:$HOME/.local/bin${PATH:+:$PATH}
    if [[ "$-" == *i* ]] ; then
        main_interactive
    fi

}

function main_interactive(){
    # Remove that thing where it looks for Ubuntu packages if a command is not found
    unset command_not_found_handle
    if [ -e ~sici000/alert ] ; then
        printf "\033[1;31m Alert from sici000\n"
        cat ~sici000/alert
    fi

    if [ -e ~phc001/alert ] ; then
        printf "\033[1;31m Alert from phc001\n"
        cat ~phc001/alert
    fi

    source $HOME/.ssh/ssh_functions.sh
    source $HOME/.simple_git_ps1_example.sh

    for f in $(env -i ls $HOME/.bash_completion.d) ; do
        source $HOME/.bash_completion.d/$f
    done

    for f in $(env -i ls $HOME/fs1/etc/bash_completion.d) ; do
        source $HOME/fs1/etc/bash_completion.d/$f
    done

    alias ls='ls --color -h'
    alias grep='grep --color'
    alias tree='tree -C'
    alias gitk=gitk_all

    export TZ=America/Toronto
    export HISTSIZE=
    export HISTFILESIZE=
    export HISTIGNORE="rm -rf *"
}

gitk_all(){
   command gitk --all $@ &
}

function orgman(){
    pandoc --standalone -f org -t man $1 | /usr/bin/man -l -
}

function p.setup-intel(){
    source ~sici000/ci-env/latest/ubuntu-18.04-amd-64/intel-19.0.3.199.sh
}
function p.setup-gnu(){
    source ~sici000/ci-env/latest/ubuntu-18.04-amd-64/gnu-9.3.0.sh
}

function p.ordenv()
{
    export ORDENV_SITE_PROFILE=20191220
    export ORDENV_COMM_PROFILE=eccc/20200409
    export ORDENV_GROUP_PROFILE=eccc/cmc/1.9.3
    . /fs/ssm/main/env/ordenv-boot-20200204.sh

    export EC_ATOMIC_PROFILE_VERSION=1.11.0
    . /fs/ssm/eccc/mrd/ordenv/profile/check_profile
}

function _p.require_ordenv()
{
    if [ -z "$ORDENV_SETUP" ] ; then
        p.ordenv
    fi
}

function p.myjobs()
{
    (
        _p.require_ordenv
        jobst | grep ${USER} -n
        exec 1>/dev/null
    )
}

function p.clearjobs()
{
    (
        _p.require_ordenv
        for jobid in $(jobst -u $USER | grep $USER | cut -d '|' -f 1) ; do
            while jobdel ${jobid} > /dev/null 2>&1
            do
                echo "Killing job '${jobid}'"
                sleep 3
            done
            echo ""
            echo "Job '${jobid}' successfully killed."
        done
    )
}

function p.use_linuxbrew(){
   export LD_LIBRARY_PATH=$HOME/.local/lib${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}
   export LD_LIBRARY_PATH=$HOME/.linuxbrew/lib${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}
   export PATH=$HOME/.linuxbrew/bin${PATH:+:${PATH}}
}

function p.realpath(){
    python3 -c "import os; print(os.path.${FUNCNAME[0]##p.}('$1'))"
}

function p.normpath(){
    python3 -c "import os; print(os.path.${FUNCNAME[0]##p.}('$1'))"
}

function p.relpath(){
    if [[ "$1" == "" ]] ; then
        echo "${FUNCNAME[0]}: ERROR: Missing argument

USAGE: ${FUNCNAME[0]} PATH [START]"
        return 1
    fi
    python3 -c "import os; print(os.path.${FUNCNAME[0]##p.}('$1', start='$2'))"
}

main
