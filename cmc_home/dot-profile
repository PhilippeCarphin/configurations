#!/bin/bash
if [[ $TERM == "dumb" ]] ; then
	unset PROMPT_COMMAND
	PS1='$ '
	return
fi

main(){
    export STOW_DIR=$HOME/fs1
    export PACKAGE_DIR=$STOW_DIR/Cellar
    export GITLAB_RUNNER_SCIENCE_ORDSOUMET_KEEP_FILES='yas'
    export GONOSUMDB=gitlab.science.gc.ca
    export PATH=$STOW_DIR/bin::$HOME/bin:$HOME/go/bin:$HOME/.local/bin${PATH:+:$PATH}
    PATH+=:$HOME/tools/go_1.17.5_all.ssm/bin
    PATH+=:$HOME/tools/go1.17.5.linux-amd64/bin
    PATH+=:$HOME/tools/node-v16.13.1-linux-x64/bin
    PATH+=:$HOME/tools/rust-1.69.0-x86_64-unknown-linux-gnu/bin
    if [[ "$-" == *i* ]] ; then
        main_interactive
    fi

}

function p.set-menu-complete(){
    # make tab cycle through commands after listing
    bind '"\t":menu-complete'
    bind "set show-all-if-ambiguous on"
    bind "set completion-ignore-case on"
    bind "set menu-complete-display-prefix on"
}


function p.set-web-proxy(){
    # From ~sbf000/.profile.d/interactive/post
    # except that I he had https_proxy=http://  and HTTPS_PROXY=http://
    # and I did            https_proxy=https:// and HTTPS_PROXY=https://
    # EDIT: Turns out my extra 's' at the end was making
    # things not work.
    export http_proxy=http://webproxy.science.gc.ca:8888/
    export https_proxy=http://webproxy.science.gc.ca:8888/
    export HTTP_PROXY=http://webproxy.science.gc.ca:8888/
    export HTTPS_PROXY=http://webproxy.science.gc.ca:8888/
}

function main_interactive(){
    # Remove that thing where it looks for Ubuntu packages if a command is not found
    export LESSOPEN="| /usr/bin/source-highlight-esc.sh %s"
    export LESS=" -R"
    unset command_not_found_handle
    if [ -e ~sici000/alert ] ; then
        printf "\033[1;31m Alert from sici000\n"
        cat ~sici000/alert
    fi

    if [ -e ~phc001/alert ] ; then
        printf "\033[1;31m Alert from phc001\n"
        cat ~phc001/alert
    fi

    source $HOME/.ssh/ssh_functions.sh
    source $HOME/.simple_git_ps1_example.sh
    source $HOME/_phil_cd.bash

    _source_dir $HOME/.bash_completion.d
    _source_dir $HOME/fs1/etc/bash_completion.d
    _source_dir $HOME/fs1/etc/profile.d


    alias ls='ls --color -h'
    alias grep='grep --color'
    alias tree='tree -C'
    alias gitk=gitk_all
    alias make='make VERBOSE='
    alias rmb='rm -rf ../build/*'

    export TZ=America/Toronto
    export HISTSIZE=
    export HISTFILESIZE=
    export HISTIGNORE="rm -rf *"
}

function _source_dir(){
    dir=$1
    if ! [ -d "$1" ] ; then
        # No echo so this function can be called on non-existant dirs
        # echo "${FUNCNAME[0]} ERROR: \$1='$1' is not a directory" >&2
        return 1
    fi
    for f in $(env -i ls $dir) ; do
        if ! source $dir/$f ; then
            echo "${FUNCNAME[0]} ERROR: sourcing '$dir/$f' returned non-zero" >&2
        fi
    done
}

p.qsubi(){
    if ! [ -e "$1" ] ; then
        echo "ERROR: File '$1' does not exist"
        return 1
    fi
	# SYNOPSIS
	#        qsub [-a <date and time>] [-A <account string>] [-c <checkpoint spec>]
	#             [-C <directive prefix>] [-e <path>] [-f] [-h]
	#             [-I [-G [-- <GUI application/script>]] | [-X]] [-j <join>]
	#             [-J <range> [%<max subjobs]] [-k <discard>] [-l <resource list>]
	#             [-m <mail events>] [-M <user list>] [-N <name>] [-o <path>]
	#             [-p <priority>] [-P <project>] [-q <destination>] [-r <y|n>]
	#             [-R <remove options>] [-S <path list>] [-u <user list>]
	#             [-v <variable list>] [-V] [-W <additional attributes>] [-z]
	#             [- | <script> | -- <executable> [<arguments to executable>]]

    qsub -I -- $1

	# When I try doing it this way with a script, it just puts me in an
    # interactive shell on a compute node and doesn't seem to run my script
	# qsub -I $1
}

p.dqsubi(){
    if ! [ -e "$1" ] ; then
        echo "ERROR: File '$1' does not exist"
        return 1
    fi

    if ! tempfile=$(mktemp qsubi-decorated-job-XXXXXXXX.sh) ; then
        echo "ERROR: Could not create tempfile"
        return 1
    fi

    # Job must have '#!/bin/bash' otherwise it "doesn't work"
    cat $1 | decorate-script -cd -shebang >> ${tempfile}

    chmod +x ${tempfile}
    qsub -I -- ${tempfile}
    rm ${tempfile}
}

p.pipeqsubi(){
    if ! tempfile=$(mktemp qsubi-decorated-job-XXXXXXXX.sh) ; then
        echo "ERROR: Could not create tempfile"
        return 1
    fi

    decorate-script -cd -shebang >> ${tempfile}

    chmod +x ${tempfile}
    script -c "qsub -I -- ${tempfile}"
    rm ${tempfile}
}
gitk_all(){
   command gitk --all $@ &
}

function orgman(){
    pandoc --standalone -f org -t man $1 | /usr/bin/man -l -
}

function p.setup-intel(){
    source $(repos -get-dir ci-env)/latest/rhel-8-icelake-64/inteloneapi-2022.1.2.sh
}
function p.setup-gnu(){
    source ~sici000/ci-env/latest/ubuntu-18.04-amd-64/gnu-9.3.0.sh
}

function p.ordenv()
{
    source ~/.profile_officiel

    export PATH=$HOME/fs1/bin:${PATH}
    complete -o default source .
}

function _p.require_ordenv()
{
    if [ -z "$ORDENV_SETUP" ] ; then
        p.ordenv
    fi
}

function p.myjobs()
{
    (
        _p.require_ordenv
        jobst | grep ${USER} -n
        exec 1>/dev/null
    )
}

function p.clearjobs()
{
    (
        _p.require_ordenv
        for jobid in $(jobst -u $USER | grep $USER | cut -d '|' -f 1) ; do
            while jobdel ${jobid} > /dev/null 2>&1
            do
                echo "Killing job '${jobid}'"
                sleep 3
            done
            echo ""
            echo "Job '${jobid}' successfully killed."
        done
    )
}

function p.use_linuxbrew(){
   export LD_LIBRARY_PATH=$HOME/.local/lib${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}
   export LD_LIBRARY_PATH=$HOME/.linuxbrew/lib${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}
   export PATH=$HOME/.linuxbrew/bin${PATH:+:${PATH}}
}

function p.realpath(){
    python3 -c "import os; print(os.path.${FUNCNAME[0]##p.}('$1'))"
}

function p.normpath(){
    python3 -c "import os; print(os.path.${FUNCNAME[0]##p.}('$1'))"
}

function p.relpath(){
    if [[ "$1" == "" ]] ; then
        echo "${FUNCNAME[0]}: ERROR: Missing argument

USAGE: ${FUNCNAME[0]} PATH [START]"
        return 1
    fi
    python3 -c "import os; print(os.path.${FUNCNAME[0]##p.}('$1', start='$2'))"
}

function emacs-daemon(){
    echo "Starting detatched tmux session named 'emacs-daemon' on '$(hostname)'"
    tmux new -s emacs-daemon -d
    echo "Sending keys 'emacs --fg-daemon' to session"
    tmux send-keys -t emacs-daemon 'emacs --fg-daemon
'
}

function vim(){
    if [[ "$@" == "" ]] ; then
        command vim -p .
    else
        command vim -p "$@"
    fi
}


main
