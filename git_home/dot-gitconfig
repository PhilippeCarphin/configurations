[user]
    name = "Philippe Carphin"
    # email set in specific files at the end

[alias]
    st = status
    sts = -c status.submoduleSummary=false status
    dss = "!f(){ printf '+   -   FILE\n' ; git diff --numstat ; } ; f"
    remote-head = "!f(){ for r in $(git remote) ; do git remote set-head --auto $r ; done ; } ; f"
    # Show the sha of the submodule commit registered to the currently checked out super-project commit
    submodule-sha = "!f(){ : git rev-parse ; submod=$1; shift ; git rev-parse :${submod} \"$@\" ; } ; f"
    # Show log entry of the submodule commit registered to the currently checked out super-project commit
    submodule-commit = "!f(){ : git rev-parse ; cd -- \"${GIT_PREFIX}\" ; submod=$1; shift ; sha=$(git rev-parse :${submod}) ; env -C ${submod} git log --format=logd -n 1 ${sha} ; } ; f"
    submodule-self-sha = "!f(){ super=$(git rev-parse --show-superproject-working-tree) ; if [[ -z ${super} ]] ; then return 1 ; fi ; submod=${PWD##${super}/} ; env GIT_DIR=${super}/.git  git rev-parse :${submod} ; } ; f"
    # Show the log entry of the commit of the current repo registered to the currently checked out commit of its super-project
    submodule-self-commit = "!f(){ super=$(git rev-parse --show-superproject-working-tree) ; if [[ -z ${super} ]] ; then return 1 ; fi ; submod=${PWD##${super}/} ; sha=$(env GIT_DIR=${super}/.git  git rev-parse :${submod}) ; git log --format=logd -n 1 ${sha} ; } ; f"
    # Git status of the current repo from the point of view of the super-project
    submodule-self-status = "!f(){ super=$(git rev-parse --show-superproject-working-tree) ; if [[ -z ${super} ]] ; then return 1 ; fi ; submod=${PWD##${super}/} ; sha=$(env GIT_DIR=${super}/.git  git rev-parse :${submod}) ; env -C ${super} GIT_DIR=${super}/.git git -c status.submoduleSummary=true status ${submod} ; } ; f"
    logd   = log --oneline --graph --format=logd
    logdw  = log --oneline --graph --format=logdw
    logdu  = log --oneline --graph --format=std     HEAD HEAD@{u}

	logo = log --abbrev-commit --decorate --format=ol
	logu = logo @{upstream}..
	log-series = ! git tag UPSTREAM @{u} && git logu --topo-order --format=\"- [PATCH %(describe:tags=true,match=UPSTREAM)/$(git rev-list @{u}.. | wc -l)] %s  \" --reverse  | sed -e \"s/UPSTREAM-//\" -e \"s|-g[a-f0-9]\\+/|/|\" && git tag -d UPSTREAM > /dev/null

    grepr = grep --recurse-submodules
    find =  "!f() { : git ls-files ; git -C \"${GIT_PREFIX}\" --work-tree=$PWD ls-files :/\\*\"$1\"\\*; }; f"
    cfind =  "!f() { : git ls-files ; git -C \"${GIT_PREFIX}\" --work-tree=$PWD ls-files | grep \"$@\"; }; f"
    findr =  "!f() { : git ls-files ; git -C \"${GIT_PREFIX}\" --work-tree=$PWD lsr :/\\*\"$1\"\\*; }; f"
    lsr = ls-files --recurse-submodule
    ldap = "!f() { result=$(ldapsearch -xLLL \"(|(cn=*$1*)(uid=$1))\"); name=$(printf \"$result\" | \\grep ^cn | awk -F': ' '{print $2}'); mail=$(printf \"$result\" | \\grep ^mail | awk -F': ' '{print $2}'); echo \"$name <${mail,,}>\" ; }; f"
    detach = "!f() { echo \"Just use 'git checkout --detach'\" ; git checkout --detach ; } ; f"
    suir = submodule update --init --recursive
    # view = "!f() { revision_and_line=\"$1\"; blob_revision=$(echo \"$revision_and_line\" | cut -d: -f1-2); line=$(echo \"$revision_and_line\" | cut -d: -f3); git show $blob_revision | vim -R - -c \"doautocmd BufRead $blob_revision\" +$line ; }; f"
    rawdiff = "-c \"core.pager=less --tabs=4 -RFX\" diff"
    rawshow = "-c \"core.pager=less --tabs=4 -RFX\" show"
    xd = difftool --dir-diff
    dt = difftool --dir-diff
    ydiff = difftool -x 'ydiff -s -w0 -c auto'
    yddiff = difftool --dir-diff -x 'ydiff -s -w0 -c auto'
    xxdiff = difftool -x 'xxdiff' --dir-diff
    meld = difftool -x 'meld'
    meld2 = difftool --dir-diff -x 'meld'
	# With --dir-diff it seems like it doens't work if the version
	# of git is not recent enough saying "<paht> : Is a directory
	comparedir = difftool --dir-diff -x 'meld'
	comparetxt = difftool -x 'meld'

	hist = log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short
    # Change git@domain:project-path[.git] to https://domain/project-path
    #        ^^^^      ^            ^^^^^^    ^^^^^^^^      ^            ^
    to-http = "!f(){ remote=origin ; if [[ $# == 1 ]] ; then remote=$1 ; fi ;  git remote get-url $remote | sed -e 's/:/\\//' -e 's/^git@/https:\\/\\//' -e 's/\\.git$//' ; } ; f"
	grep-call = "!f() { : git grep ; pattern=\"$1\"; shift; git -C \"$GIT_PREFIX\" --work-tree=$PWD grep -i -p -E -e \"call[ ]+$pattern([ ]+|\\()*\" \"$@\" ; }; f"

[diff "fortran-namelist"]
	xfuncname = "^[ \\t]*&.*$"

[credential]
    helper = cache --timeout 36000

[pull]
    # ff = only

[url "https://github.com/PhilippeCarphin/"]
    insteadOf = me:

[core]
    pager = diff-so-fancy | less --tabs=4 -RFX
    # pager = /home/phc001/Repositories/github.com/dandavison/delta/localinstall/bin/delta -n

# [interactive]
#     diffFilter = /home/phc001/Repositories/github.com/dandavison/delta/localinstall/bin/delta --color-only --features=interactive
# 
# [delta]
#     navigate = true    # use n and N to move between diff sections
#     light = false      # set to true if you're in a terminal w/ a light background color (e.g. the default macOS terminal)
# 
# [merge]
#     conflictstyle = diff3
# 
# [diff]
#     colorMoved = default

################################################################################
# difftool options
################################################################################
[difftool]
    prompt = false
# Add the following to your .gitconfig file.
# https://stackoverflow.com/questions/34119866/setting-up-and-using-meld-as-your-git-difftool-and-mergetool
######################### xxdiff ###############################################
# [diff]
# 	tool = xxdiff
######################### meld #################################################
# [diff]
#   tool = meld
######################### ydiff ################################################
# For viewing side-by-side diff in the shell
# [diff]
#     tool = ydiff
# [difftool "ydiff"]
#     cmd = ydiff -s -w0 -c auto
# NOTE: We can have multiple difftool options configured by creating aliases
# like `ydiff = difftool -x 'ydiff -s -w0 -c auto'` and these allow for extra
# options like `xxdiff = difftool -x xxdiff --dir-diff`

[gui]
	fontui = -family \".SF NS Text\" -size 18 -weight normal -slant roman -underline 0 -overstrike 0
	fontdiff = -family \"DejaVu Sans Mono\" -size 16 -weight normal -slant roman -underline 0 -overstrike 0
# [http "https://gitlab.science.gc.ca/"]
#        proxy = socks5h://127.0.0.1:8080
[log]
    date = human
    excludeDecoration = refs/remotes/private*

[pretty]
    logd = %C(yellow)%h%C(reset)%C(auto)%d%C(reset) %C(bold white)%<|(90,trunc)%s %<(17)%C(cyan)%ad%Creset %C(blue)%an%C(reset)
    logdw = %C(yellow)%h%C(reset)%C(auto)%d%C(reset) %C(bold white)%<|(140,trunc)%s %<(17)%C(cyan)%ad%Creset %C(blue)%an%C(reset)
	# similar to '--oneline' but with additional information (author, author date, (notes truncated at 2 chars) )
	ol = %C(yellow)%h%C(reset) %C(normal)%s%C(reset) %C(dim white)%an%C(reset) %C(dim blue)(%ad)%C(reset) %C(auto)%d%C(reset)

[status]
    submoduleSummary = true

[submodule]
    # recurse = true
[push]
    default = current
    recurseSubmodules = check
[remote]
	pushDefault = origin

[safe]
    directory = *


# Merci Philippe Blain!
[color "grep"]
    filename = magenta
    linenumber = green
    column = green
    function = 146 bold
[grep]
    lineNumber = true
    column = true
    fallbackToNoIndex = true
[commit]
    # Show diffs in COMMIT_EDITMSG
    verbose = 2
# End merci Philippe Blain!

[advice]
	detachedHead = false
[merge]
	tool = meld
[init]
    defaultBranch = main

################################################################################
# Specific settings: Leave this at the end to ensure that specific settings
# override less specific ones
################################################################################
# Order is important: settings in later includes override settings in earlier
# ones.  So if a repo has a github.com remote and a gitlab.science.gc.ca
# remote, it is therefore a work repo so it should have the work email
[includeIf "hasconfig:remote.*.url:**github.com**/*"]
    path = ~/.philconfig/git_home/personal-email.gitconfig
[includeIf "hasconfig:remote.*.url:**gitlab.com**/*"]
    path = ~/.philconfig/git_home/personal-email.gitconfig
[includeIf "hasconfig:remote.*.url:**github.com/ECCC-ASTD-MRD/*"]
    path = ~/.philconfig/git_home/work-email.gitconfig
[includeIf "hasconfig:remote.*.url:**gitlab.science.gc.ca**/*"]
    path = ~/.philconfig/git_home/work-email.gitconfig
